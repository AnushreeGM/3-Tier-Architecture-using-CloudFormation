AWSTemplateFormatVersion: '2010-09-09'

Description: StackSet template to create a basic VPC with public and private subnets

Parameters:
  VPCCidr:
    Type: String
    Default: 10.0.0.0/16
    Description: CIDR block for the VPC

  PublicSubnet1Cidr:
    Type: String
    Default: 10.0.1.0/24
    Description: CIDR block for the public subnet 1

  PublicSubnet2Cidr:
    Type: String
    Default: 10.0.2.0/24
    Description: CIDR block for the public subnet 2

  PrivateSubnet1Cidr:
    Type: String
    Default: 10.0.3.0/24
    Description: CIDR block for the private subnet 1
  
  PrivateSubnet2Cidr:
    Type: String
    Default: 10.0.4.0/24
    Description: CIDR block for the private subnet 2

  DatabaseSubnet1Cidr:
    Type: String
    Default: 10.0.5.0/24
    Description: CIDR block for the Database Subnet 1

  DatabaseSubnet2Cidr:
    Type: String
    Default: 10.0.6.0/24
    Description: CIDR block for the Database Subnet 2
  
  MyIP:
    Type: String
    Default: 167.103.22.100/32  
    Description: IP Address of your machine

Resources:

  #VPC 
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCidr
      Tags:
        - Key: Name
          Value: !Sub "StackSet-VPC-${AWS::Region}"

  #Public Subnet 1
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref PublicSubnet1Cidr
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: "PublicSubnet1"

  #Public subnet 2  
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref PublicSubnet2Cidr
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: "PublicSubnet2"

  #Private Subnet 1
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref PrivateSubnet1Cidr
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: "PrivateSubnet1"
 
  #Private Subnet 2
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref PrivateSubnet2Cidr
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: "PrivateSubnet2"


  #Database Subnet  
  DatabaseSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref DatabaseSubnet1Cidr
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: "DatabaseSubnet1"

  #Database Subnet 2 (NEW)
  DatabaseSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: !Ref DatabaseSubnet2Cidr
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: "DatabaseSubnet2"

  #Internet Gateway
  MyInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "IGW-${AWS::Region}"

  #Attach the Internet Gateway to VPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref MyInternetGateway
      
  #Create an Elastic IP to Attach it for NAT Gateway    
  MyElasticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub "EIP-NAT-${AWS::Region}"

  #Create a NAT Gateway and Attach elastic IP address
  MyNATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt MyElasticIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub "NAT-Gateway-${AWS::Region}"
 
  #Create a Route table
  MyRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: !Sub "Public-RouteTable-${AWS::Region}"

  PublicRouteToInternet:
    Type: AWS::EC2::Route
    DependsOn: MyInternetGateway
    Properties:
      RouteTableId: !Ref MyRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyInternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: PublicRouteToInternet
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref MyRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DependsOn: PublicRouteToInternet
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref MyRouteTable

  #Route Table for private Subnet
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: !Sub "Private-RouteTable-${AWS::Region}"

  #Add route to NAT gateway
  PrivateRoute:
    Type: AWS::EC2::Route
    DependsOn: MyNATGateway
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref MyNATGateway
  
  #Route Table association
  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  #Security Group for Internet Facing SG 
  InternetFacingLBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access for ALB
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: Allow HTTP from anywhere (IPv4)
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIpv6: ::/0
          Description: Allow HTTP from anywhere (IPv6)
      Tags:
        - Key: Name
          Value: Internet-Facing-LB-SG
  
  #Web Tier Security group allowing Internet Facing LB SG
  WebTierSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Web Tier
      VpcId: !Ref MyVPC  
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref InternetFacingLBSecurityGroup 
          Description: Allow HTTP from Internet-Facing Load Balancer
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref MyIP
          Description: Allow HTTP from admin workstation

  #Internal Load Balancer Security Group
  InternalLbSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for internal load balancer
      VpcId: !Ref MyVPC  
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref WebTierSG  
          Description: Allow HTTP from WebTier-sg
      Tags:
        - Key: Name
          Value: Internal-lb-sg
 
  #Private Instance Security Group allowing internal LB
  PrivateInstanceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Private Tier Instance (port 4000)
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 4000
          ToPort: 4000
          SourceSecurityGroupId: !Ref InternalLbSG
          Description: Allow port 4000 from Internal Load Balancer
        - IpProtocol: tcp
          FromPort: 4000
          ToPort: 4000
          CidrIp: !Ref MyIP
          Description: Allow port 4000 from Admin IP
      Tags:
        - Key: Name
          Value: Private-Instance-SG

  #Security Group DB allowing Private instance SG
  DBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for MySQL/Aurora DB
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref PrivateInstanceSG
          Description: Allow MySQL/Aurora access from Private Instance
      Tags:
        - Key: Name
          Value: DB-SG

  #Create a DB Subnet Group
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "Subnet group for RDS database"
      SubnetIds:
        - !Ref DatabaseSubnet1
        - !Ref DatabaseSubnet2
      Tags:
        - Key: Name
          Value: "Three-tier-subnet-group"

  MyDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: myproject-db
      Engine: mysql
      DBInstanceClass: db.t3.micro
      MasterUsername: admin
      MasterUserPassword: Admin123456
      AllocatedStorage: 20
      VPCSecurityGroups:
        - !Ref DBSG   
      DBSubnetGroupName: !Ref DBSubnetGroup
      MultiAZ: false
      PubliclyAccessible: false
      StorageType: gp2
      BackupRetentionPeriod: 7
      Tags:
        - Key: Name
          Value: myproject-db

  #AppTier Target Group
  AppTierTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: app-tier-tg
      Port: 4000
      Protocol: HTTP
      VpcId: !Ref MyVPC
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      Matcher:
        HttpCode: 200
      TargetType: instance

# Internal Application Load Balancer
  AppTierInternalALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: app-tier-internal-lb
      Scheme: internal
      Subnets:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroups:
        - !Ref InternalLbSG
      Tags:
        - Key: Name
          Value: app-tier-internal-lb

# Listener on port 80 HTTP forwarding to target group
  AppTierALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref AppTierInternalALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AppTierTargetGroup

  # Target Group for Web Tier
  WebServerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: webserver-tg
      Port: 80
      Protocol: HTTP
      VpcId: !Ref MyVPC
      HealthCheckPath: /health
      TargetType: instance
      Matcher:
        HttpCode: 200
      Tags:
        - Key: Name
          Value: webserver-tg

  # Internet-facing Application Load Balancer
  WebTierALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: web-tier-external-alb
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref InternetFacingLBSecurityGroup
      Tags:
        - Key: Name
          Value: web-tier-external-alb

  # Listener for ALB on port 80 forwarding to WebServerTargetGroup
  WebTierALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref WebTierALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WebServerTargetGroup

Outputs:
  VPCId:
    Description: VPC ID
    Value: !Ref MyVPC
  PublicSubnetId:
    Description: Public Subnet ID
    Value: !Ref PublicSubnet1
  PrivateSubnetId:
    Description: Private Subnet ID
    Value: !Ref PrivateSubnet1
  DatabaseSubnet1Id:
    Description: Database Subnet ID
    Value: !Ref DatabaseSubnet1
  DatabaseSubnet2Id:
    Description: Second Database Subnet ID
    Value: !Ref DatabaseSubnet2
  RDSInstanceEndpoint:
    Description: RDS Endpoint Address
    Value: !GetAtt MyDBInstance.Endpoint.Address
  WebALBDNSName:
    Description: Web Tier ALB DNS Name
    Value: !GetAtt WebTierALB.DNSName
  AppALBDNSName:
    Description: Internal App Tier ALB DNS Name
    Value: !GetAtt AppTierInternalALB.DNSName
